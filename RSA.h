#include <iostream>
#include <cstdint>
#include <vector>
#include <random>
#include <bitset>
#include <stdio.h>
#include <fstream>
#include <array>
#include<cstdlib>
#include <Windows.h>

using namespace std;

#define ROL(x, y) (((x) << (y)) | ((x) >> (32 - (y))))
#define A5_STEP(x, y, z) ((x & y) ^ (x & z) ^ (y & z))
static char encoding_table[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                                'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                                'w', 'x', 'y', 'z', '0', '1', '2', '3',
                                '4', '5', '6', '7', '8', '9', '-', '_' };
static char* decoding_table = NULL;
static int mod_table[] = { 0, 2, 1 };

void build_decoding_table()
{

    decoding_table = (char *)malloc(256);

    for (long int i = 0; i < 64; i++)
        decoding_table[(unsigned char)encoding_table[i]] = i;
}

void base64_cleanup()
{
    free(decoding_table);
}

char* base64_encode(unsigned char* data,
    size_t input_length,
    size_t* output_length)
{

    *output_length = 4 * ((input_length + 2) / 3);

    char* encoded_data = (char *)malloc(*output_length + 1);
    memset(encoded_data, '\0', *output_length);
    if (encoded_data == NULL)
        return NULL;

    for (int i = 0, j = 0; i < input_length;)
    {

        uint32_t octet_a = i < input_length ? (unsigned char)data[i++] : 0;
        uint32_t octet_b = i < input_length ? (unsigned char)data[i++] : 0;
        uint32_t octet_c = i < input_length ? (unsigned char)data[i++] : 0;

        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;

        encoded_data[j++] = encoding_table[(triple >> 3 * 6) & 0x3F];
        encoded_data[j++] = encoding_table[(triple >> 2 * 6) & 0x3F];
        encoded_data[j++] = encoding_table[(triple >> 1 * 6) & 0x3F];
        encoded_data[j++] = encoding_table[(triple >> 0 * 6) & 0x3F];
        // printf("%d\n", j);
    }

    // int i=0;
    for (int i = 0; i < mod_table[input_length % 3]; i++)
        encoded_data[*output_length - 1 - i] = '=';
    encoded_data[*output_length] = '\0';

    return encoded_data;
}

unsigned char* base64_decode(const char* data,
    size_t input_length,
    size_t* output_length)
{

    if (decoding_table == NULL)
        build_decoding_table();
    if (input_length % 4 != 0)
        return NULL;
    *output_length = input_length / 4 * 3;

    if (data[input_length - 1] == '=')
        (*output_length)--;
    if (data[input_length - 2] == '=')
        (*output_length)--;
    unsigned char* decoded_data = (unsigned char*)malloc(*output_length);
    if (decoded_data == NULL)
        return NULL;

    for (long int i = 0, j = 0; i < input_length;)
    {

        uint32_t sextet_a = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
        uint32_t sextet_b = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
        uint32_t sextet_c = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
        uint32_t sextet_d = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];

        uint32_t triple = (sextet_a << 3 * 6) + (sextet_b << 2 * 6) + (sextet_c << 1 * 6) + (sextet_d << 0 * 6);

        if (j < *output_length)
            decoded_data[j++] = (triple >> 2 * 8) & 0xFF;
        if (j < *output_length)
            decoded_data[j++] = (triple >> 1 * 8) & 0xFF;
        if (j < *output_length)
            decoded_data[j++] = (triple >> 0 * 8) & 0xFF;
    }

    return decoded_data;
}


char my_secret_key[] = "Hello";
char* R4(PCHAR key, PCHAR input, PCHAR output, DWORD length) //same function for encryption and decryption
{
    size_t input_len = strlen(input);
    size_t* decode_size = (size_t*)malloc(sizeof(size_t));
    input = (PCHAR)base64_decode((char*)input, input_len * 4, decode_size);
    unsigned char S[256];
    size_t len = strlen(key);
    int j = 0;
    unsigned char tmp;
    for (int i = 0; i < 256; i++)
        S[i] = i;
    for (int i = 0; i < 256; i++) {
        j = (j + S[i] + ((PUCHAR)key)[i % len]) % 256;
        tmp = S[i];
        S[i] = S[j];
        S[j] = tmp;
    }
    int i = 0;
    j = 0;
    for (int n = 0; n < length; n++) {
        i = (i + 1) % 256;
        j = (j + S[i]) % 256;
        tmp = S[i];
        S[i] = S[j];
        S[j] = tmp;
        int rnd = S[(S[i] + S[j]) % 256];
        ((PUCHAR)output)[n] = rnd ^ ((PUCHAR)input)[n];
    }
    return output;
}

void a5_1_encrypt(unsigned char* key, int key_len, unsigned char* msg, int msg_len, unsigned char* out) {
    // initialization
    unsigned int R1 = 0, R2 = 0, R3 = 0;
    for (int i = 0; i < 64; i++) {
        int feedback = ((key[i % key_len] >> (i / 8)) & 1) ^ ((R1 >> 18) & 1) ^ ((R2 >> 21) & 1) ^ ((R3 >> 22) & 1);
        R1 = (R1 << 1) | feedback;
        R2 = (R2 << 1) | ((R1 >> 8) & 1);
        R3 = (R3 << 1) | ((R2 >> 10) & 1);
    }
    // encryption
    for (int i = 0; i < msg_len; i++) {
        int feedback = A5_STEP((R1 >> 8) & 1, (R2 >> 10) & 1, (R3 >> 10) & 1);
        unsigned char key_byte = 0;
        for (int j = 0; j < 8; j++) {
            int bit = A5_STEP((R1 >> 18) & 1, (R2 >> 21) & 1, (R3 >> 22) & 1) ^ feedback;
            key_byte |= bit << j;
            R1 = (R1 << 1) | bit;
            R2 = (R2 << 1) | ((R1 >> 8) & 1);
            R3 = (R3 << 1) | ((R2 >> 10) & 1);
        }
        out[i] = msg[i] ^ key_byte;
    }
}

void a5_1_decrypt(unsigned char* key, int key_len, unsigned char* cipher, int cipher_len, unsigned char* out) {
    // initialization
    unsigned int R1 = 0, R2 = 0, R3 = 0;
    for (int i = 0; i < 64; i++) {
        int feedback = ((key[i % key_len] >> (i / 8)) & 1) ^ ((R1 >> 18) & 1) ^ ((R2 >> 21) & 1) ^ ((R3 >> 22) & 1);
        R1 = (R1 << 1) | feedback;
        R2 = (R2 << 1) | ((R1 >> 8) & 1);
        R3 = (R3 << 1) | ((R2 >> 10) & 1);
    }
    // decryption
    for (int i = 0; i < cipher_len; i++) {
        int feedback = A5_STEP((R1 >> 8) & 1, (R2 >> 10) & 1, (R3 >> 10) & 1);
        unsigned char key_byte = 0;
        for (int j = 0; j < 8; j++) {
            int bit = A5_STEP((R1 >> 18) & 1, (R2 >> 21) & 1, (R3 >> 22) & 1) ^ feedback;
            key_byte |= bit << j;
            R1 = (R1 << 1) | bit;
            R2 = (R2 << 1) | ((R1 >> 8) & 1);
            R3 = (R3 << 1) | ((R2 >> 10) & 1);
        }
        out[i] = cipher[i] ^ key_byte;
    }
}