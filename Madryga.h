#pragma once
#include<iostream>
#include<Windows.h>

#define ROUNDS 16

using namespace std;

typedef uint32_t u32;

//u32 key[4] = { 0x00010203, 0x04050607, 0x08090A0B, 0x0C0D0E0F };
u32 key[4] = { 0x00010269, 0x04049876, 0x08090ACB, 0x0C0D0E1F };

void madryga_encrypt(u32* v, u32* k) {
    u32 v0 = v[0], v1 = v[1], sum = 0, i;
    u32 delta = 0x9E3779B9;
    for (i = 0; i < ROUNDS; i++) {
        sum += delta;
        v0 += ((v1 << 4) + k[0]) ^ (v1 + sum) ^ ((v1 >> 5) + k[1]);
        v1 += ((v0 << 4) + k[2]) ^ (v0 + sum) ^ ((v0 >> 5) + k[3]);
    }
    v[0] = v0; v[1] = v1;
}

void madryga_decrypt(u32* v, u32* k) {
    u32 v0 = v[0], v1 = v[1], sum = 0xE3779B90, i;
    u32 delta = 0x9E3779B9;
    for (i = 0; i < ROUNDS; i++) {
        v1 -= ((v0 << 4) + k[2]) ^ (v0 + sum) ^ ((v0 >> 5) + k[3]);
        v0 -= ((v1 << 4) + k[0]) ^ (v1 + sum) ^ ((v1 >> 5) + k[1]);
        sum -= delta;
    }
    v[0] = v0; v[1] = v1;
}

void madryga_encrypt_shellcode(unsigned char* shellcode, int shellcode_len) {
    int i;
    uint32_t* ptr = (uint32_t*)shellcode;
    for (i = 0; i < shellcode_len / 8; i++) {
        madryga_encrypt(ptr, key);
        ptr += 2;
    }
    // check if there are remaining bytes
    int remaining = shellcode_len % 8;
    if (remaining != 0) {
        // pad with 0x90
        unsigned char pad[8] = { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
        memcpy(pad, ptr, remaining);
        madryga_encrypt((uint32_t*)pad, key);
        memcpy(ptr, pad, remaining);
    }

}

void madryga_decrypt_shellcode(unsigned char* shellcode, int shellcode_len) {
    int i;
    uint32_t* ptr = (uint32_t*)shellcode;
    for (i = 0; i < shellcode_len / 8; i++) {
        madryga_decrypt(ptr, key);
        ptr += 2;
    }
    // check if there are remaining bytes
    int remaining = shellcode_len % 8;
    if (remaining != 0) {
        // pad with 0x90
        unsigned char pad[8] = { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
        memcpy(pad, ptr, remaining);
        madryga_decrypt((uint32_t*)pad, key);
        memcpy(ptr, pad, remaining);
    }
}